/* eslint-disable prettier/prettier */
/* eslint-disable no-use-before-define */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign In/Up with Google
     * @description Sign Ins or Sign Ups a user using a google account
     *
     */
    post: operations["auth-google"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/facebook": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign In/Up with Facebook
     * @description Sign Ins or Sign Ups a user using a facebook account
     *
     */
    post: operations["auth-facebook"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/email": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign In/Up with email
     * @description Sign Ins or Sign Ups a user using a magic link sent to the user's email.
     *
     */
    post: operations["auth-email"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/phone": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign In/Up with phone number
     * @description Sign Ins or Sign Ups a user using a magic link sent to the user's phone.
     *
     */
    post: operations["auth-phone"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/code": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Exchange magic link code
     * @description Exchange magic link code for the user's auth tokens.
     *
     */
    post: operations["auth-code"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Refresh `accessToken`
     * @description Refresh `accessToken`
     *
     */
    post: operations["auth-refresh"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/iam": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's account data
     * @description Get user's account data
     *
     */
    get: operations["account-iam"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/name": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update user's name
     * @description Update user's name
     *
     */
    patch: operations["account-name"];
    trace?: never;
  };
  "/accounts/onboarding": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update user's onboarding progress
     * @description Update user's onboarding progress
     *
     */
    patch: operations["account-update-onboarding"];
    trace?: never;
  };
  "/banks/providers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of bank providers
     * @description Get a list of bank providers
     *
     */
    get: operations["bank-providers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bank/accounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of user's bank accounts
     * @description Get user's bank accounts
     *
     */
    get: operations["bank-account-get"];
    put?: never;
    /**
     * Create bank account
     * @description Create bank account
     *
     */
    post: operations["bank-account-create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bank/accounts/balance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update bank account balance
     * @description Update bank account balance
     *
     */
    patch: operations["bank-account-balance"];
    trace?: never;
  };
  "/budgets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create budget
     * @description Create budget
     *
     */
    post: operations["budget-create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/budgets/basic": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create basic budget
     * @description Create basic budget
     *
     */
    post: operations["budget-basic-create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/budgets/overview": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get budget overview
     * @description Get budget overview
     *
     */
    get: operations["budget-overview"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/cards/providers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get card providers
     * @description Get a list of card providers
     *
     */
    get: operations["card-providers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/cards": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create card
     * @description Create card
     *
     */
    post: operations["card-create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/cards/postpaid": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's postpaid cards
     * @description Get a list of the user's postpaid cards, ordered by card name.
     *
     */
    get: operations["card-postpaid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/cards/prepaid": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's prepaid cards
     * @description Get a list of the user's prepaid cards, ordered by card name.
     *
     */
    get: operations["card-prepaid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/cards/bills": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's cards bills to be paid
     * @description Get a list of the user's cards bills to be paid, ordered by payment date (newest -> oldest).
     *
     */
    get: operations["card"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/categories/many": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create one or more categories
     * @description Create one or more categories
     *
     */
    post: operations["category-create-many"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's categories
     * @description Get a list of the user's categories
     *
     */
    get: operations["category-get"];
    put?: never;
    post?: never;
    /**
     * Delete category
     * @description Delete category
     *
     */
    delete: operations["category-delete"];
    options?: never;
    head?: never;
    /**
     * Update category
     * @description Update category
     *
     */
    patch: operations["category-update"];
    trace?: never;
  };
  "/categories/default": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of default categories
     * @description Get a list of default categories
     *
     */
    get: operations["category-default"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/terms/accept": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Accept terms and policies
     * @description Accept terms and policies
     *
     */
    post: operations["terms-accept"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/terms/latest": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get latest terms and policies
     * @description Get latest terms and policies
     *
     */
    get: operations["terms-latest"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transactions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's transactions
     * @description Get user's transactions
     *
     */
    get: operations["transaction-get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transactions/salary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create the user's salary
     * @description Create the user's salary
     *
     */
    post: operations["transaction-salary"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transactions/transfer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create TRANSFER transaction
     * @description Create a TRANSFER transaction, to transfer money from
     *     one of the user's bank accounts to another
     *
     */
    post: operations["transaction-transfer"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transactions/in-out": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create IN or OUT transaction
     * @description Create a IN or OUT transaction, to add or remove money from
     *     one of the user's bank accounts
     *
     */
    post: operations["transaction-in-out"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transactions/credit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create CREDIT transaction
     * @description Create a CREDIT transaction, to add or remove money from
     *     one of the user's bank accounts only when the card bill
     *     is paid
     *
     */
    post: operations["transaction-credit"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/wallet/balance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user's balance overview
     * @description Get user's balance overview
     *
     */
    get: operations["wallet-balance"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Auth with Third Party Provider */
    "auth-with-external-provider": {
      /** @description Code returned by the auth provider */
      code: string;
      /**
       * Format: url
       * @description The origin of this request, same url used for `redirect_uri`
       */
      originUrl?: string;
    };
    /** @description Access token used to make requests. Short lived, should be refreshed with the `refreshToken` when it expires (`expiresAt`).
     *      */
    "access-token": string;
    /** @description Long lived token, used to generate other `accessToken`s
     *      */
    "refresh-token": string;
    /**
     * Format: date-time
     * @description Expiration date of the `accessToken`
     *
     */
    "expires-at": string;
    /** Auth response content */
    "auth-response-content": {
      accessToken: components["schemas"]["access-token"];
      refreshToken: components["schemas"]["refresh-token"];
      expiresAt: components["schemas"]["expires-at"];
    };
    /**
     * Format: email
     * @description User's email
     */
    email: string;
    /** @description User's complete phone number, including country code */
    phone: string;
    /** @description Name
     *      */
    name: string;
    /**
     * @description Icon ID
     *
     * @enum {string}
     */
    icon:
      | "house"
      | "shopping-cart"
      | "baby"
      | "tv"
      | "medkit"
      | "kiss"
      | "suitcase"
      | "beach"
      | "question"
      | "upload"
      | "download"
      | "transfer"
      | "ad"
      | "crown"
      | "pencil"
      | "logout"
      | "trashcan"
      | "pluscircle"
      | "google"
      | "email"
      | "phone"
      | "invoice"
      | "plus"
      | "wallet"
      | "gear"
      | "arrow-left"
      | "less-than"
      | "more-than"
      | "triangle-down"
      | "info"
      | "bank"
      | "card"
      | "ticket"
      | "category"
      | "pdf"
      | "tag"
      | "bell"
      | "connect"
      | "profile"
      | "eye-slash"
      | "clock"
      | "computer"
      | "calendar"
      | "money-bag";
    /**
     * Format: hex
     * @description Color HEX code
     *
     */
    color: string;
    /** SubscriptionEntity */
    Subscription: {
      /**
       * Format: uuid
       * @description Card ID
       */
      id: string;
      name: components["schemas"]["name"];
      icon: components["schemas"]["icon"];
      color: components["schemas"]["color"];
      iconColor: components["schemas"]["color"];
      /** @description Price if paid per month */
      monthlyPrice: number;
      /** @description Price if paid per year */
      yearlyPrice: number;
      /** @description bankAccounts limit */
      bankAccounts: number;
      /** @description postpaidCards limit */
      postpaidCards: number;
      /** @description prepaidCards limit */
      prepaidCards: number;
      /** @description categories limit */
      categories: number;
      /** @description transaction limit */
      transaction?: number;
      /** @description recurrentTransactions limit */
      recurrentTransactions: number;
      /** @description reports limit */
      reports: number;
      /** @description tags limit */
      tags: number;
      /** @description reminders limit */
      reminders: number;
      /** @description bankIntegrations limit */
      bankIntegrations: number;
      /** @description budgets limit */
      budgets: number;
      /** @description web limit */
      web: number;
      /** @description ctlBtm limit */
      ctlBtm: number;
    };
    /** Pagination */
    paging: {
      /** @description Current page cursor
       *      */
      curPage: number;
      /** @description Next page cursor
       *      */
      nextPage: number;
      /** @description Previous page cursor
       *      */
      prevPage?: number;
      /** @description Max items returned by the request
       *      */
      limit: number;
    };
    /** @description Bank provider code */
    "bank-provider-code": string;
    /**
     * Format: url
     * @description Icon url
     *
     */
    "icon-url": string;
    /** BankProviderEntity */
    BankProvider: {
      /**
       * Format: uuid
       * @description Bank provider ID
       */
      id: string;
      name: components["schemas"]["name"];
      code: components["schemas"]["bank-provider-code"];
      iconUrl: components["schemas"]["icon-url"];
      color: components["schemas"]["color"];
    };
    /** @description Account number */
    "account-number": string;
    /** @description Bank account branch */
    branch: string;
    /** @description Multiplied by 100, Ex: R$ 10.00 = 1000
     *
     *     Alert for Card Entities: Only prepaid cards have this field
     *      */
    balance: number;
    /** BankAccountEntity */
    BankAccount: {
      /**
       * Format: uuid
       * @description Bank account ID
       */
      id: string;
      /**
       * Format: uuid
       * @description User ID
       */
      accountId: string;
      /**
       * Format: uuid
       * @description Bank provider ID
       */
      bankId: string;
      accountNumber: components["schemas"]["account-number"];
      branch: components["schemas"]["branch"];
      balance: components["schemas"]["balance"];
      name: components["schemas"]["name"];
    };
    /** @description Description
     *      */
    description: string;
    /** @description Year */
    year: number;
    /** @description Month */
    month: number;
    /** @description Multiplied by 100, Ex: R$ 10.00 = 1000
     *      */
    amount: number;
    /** BudgetEntity */
    Budget: {
      /**
       * Format: uuid
       * @description Budget ID
       */
      id: string;
      /**
       * Format: uuid
       * @description User ID
       */
      accountId: string;
      name: components["schemas"]["name"];
      description: components["schemas"]["description"];
    };
    /**
     * @description Card type
     *
     * @enum {string}
     */
    "card-type": "CREDIT" | "BENEFIT";
    /**
     * @description Card network
     *
     * @enum {string}
     */
    "card-network":
      | "VISA"
      | "MASTERCARD"
      | "ELO"
      | "SODEXO"
      | "AMEX"
      | "ALELO"
      | "PLUXEE"
      | "TICKET"
      | "VR";
    /** @description Card statement days */
    "card-statement-days": number;
    /** CardProviderEntity */
    CardProvider: {
      /**
       * Format: uuid
       * @description Card provider ID
       */
      id: string;
      /**
       * Format: uuid
       * @description Bank provider ID
       */
      bankId: string;
      name: components["schemas"]["name"];
      iconUrl: components["schemas"]["icon-url"];
      color: components["schemas"]["color"];
      type: components["schemas"]["card-type"];
      network: components["schemas"]["card-network"];
      statementDays: components["schemas"]["card-statement-days"];
    };
    /** @description Last four digits of the card */
    "last-four-digits": string;
    /** @description Card statement days
     *
     *     Alert: Only postpaid cards have this field
     *      */
    "due-day": number;
    /** @description Card limit
     *
     *     Alert: Only postpaid cards have this field
     *      */
    "card-limit": number;
    /**
     * @description Pay at, says when the user wants the credit card bill to be paid
     *     For card creation: Required if want to also create recurrent transaction
     *
     * @enum {string}
     */
    "pay-at": "STATEMENT" | "DUE";
    /**
     * Format: date-time
     * @description First day that the transactions started to be part of the bill
     *
     */
    "start-date": string;
    /**
     * Format: date-time
     * @description Last day that the transactions are part of the bill
     *
     */
    "end-date": string;
    /**
     * Format: date-time
     * @description First day to pay the bill
     *
     */
    "statement-date": string;
    /**
     * Format: date-time
     * @description Final date to pay the bill
     *
     */
    "due-date": string;
    /** CardPostpaidEntity */
    CardPostpaid: {
      /**
       * Format: uuid
       * @description Card ID
       */
      id: string;
      name: components["schemas"]["name"];
      lastFourDigits: components["schemas"]["last-four-digits"];
      provider: {
        iconUrl: components["schemas"]["icon-url"];
        color: components["schemas"]["color"];
        network: components["schemas"]["card-network"];
      };
      bill: {
        total: components["schemas"]["amount"];
        startDate: components["schemas"]["start-date"];
        endDate: components["schemas"]["end-date"];
        statementDate: components["schemas"]["statement-date"];
        dueDate: components["schemas"]["due-date"];
      };
    };
    /** CardPrepaidEntity */
    CardPrepaid: {
      /**
       * Format: uuid
       * @description Card ID
       */
      id: string;
      name: components["schemas"]["name"];
      lastFourDigits: components["schemas"]["last-four-digits"];
      balance: components["schemas"]["balance"];
      provider: {
        iconUrl: components["schemas"]["icon-url"];
        color: components["schemas"]["color"];
        network: components["schemas"]["card-network"];
      };
    };
    /** CardPostpaidEntity */
    CardGetBillsToBePaid: {
      /**
       * Format: uuid
       * @description Card ID
       */
      id: string;
      name: components["schemas"]["name"];
      lastFourDigits: components["schemas"]["last-four-digits"];
      provider: {
        iconUrl: components["schemas"]["icon-url"];
        color: components["schemas"]["color"];
        network: components["schemas"]["card-network"];
      };
      bill: {
        total: components["schemas"]["amount"];
        payAt: components["schemas"]["pay-at"];
        statementDate: components["schemas"]["statement-date"];
        dueDate: components["schemas"]["due-date"];
      };
    };
    /** CategoryEntity */
    Category: {
      /**
       * Format: uuid
       * @description Category ID
       */
      id: string;
      /**
       * Format: uuid
       * @description User ID
       */
      accountId: string;
      name: components["schemas"]["name"];
      description: components["schemas"]["description"];
      icon: components["schemas"]["icon"];
      color: components["schemas"]["color"];
      /** @description Tells if the category should appear on the category selection or not
       *      */
      active: boolean;
    };
    /** TermsOfServiceEntity */
    TermsOfService: {
      /**
       * Format: semVer
       * @description Terms and policies ID
       */
      semVer?: string;
      /** @description Terms of use markdown */
      termsOfUse: string;
      /** @description Privacy policy markdown */
      privacyPolicy: string;
      /**
       * Format: date-time
       * @description Date that the terms of service is live and active for the user's
       */
      liveAt: string;
    };
    /**
     * @description Transaction type
     *
     * @enum {string}
     */
    "transaction-type": "IN" | "OUT" | "CREDIT" | "TRANSFER";
    /** @description Transaction name
     *      */
    "transaction-name": string;
    /**
     * Format: date-time
     * @description Creation date
     *
     */
    "created-at": string;
  };
  responses: {
    /** @description User must sign in before use this route
     *      */
    unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content?: never;
    };
    /** @description TODO
     *      */
    "bad-request": {
      headers: {
        [name: string]: unknown;
      };
      content?: never;
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "auth-google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["auth-with-external-provider"];
      };
    };
    responses: {
      /** @description Sign In: User already existed
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth-response-content"];
        };
      };
      /** @description Sign Up: User created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth-response-content"];
        };
      };
      /** @description Something went wrong, we don't return any specific details because of user's privacy.
       *
       *     Possible causes:
       *     - Code invalid or expired
       *     - User's email isn't verified on the provider
       *     - An user with the same email, that it's connected to the same provider, but with a different provider ID already exists. In this case we can't link the accounts, because they may be different users.
       *      */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "auth-facebook": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["auth-with-external-provider"];
      };
    };
    responses: {
      /** @description Sign In: User already existed
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth-response-content"];
        };
      };
      /** @description Sign Up: User created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth-response-content"];
        };
      };
      /** @description Something went wrong, we don't return any specific details because of user's privacy.
       *
       *     Possible causes:
       *     - Code invalid or expired
       *     - User's email isn't verified on the provider
       *     - An user with the same email, that it's connected to the same provider, but with a different provider ID already exists. In this case we can't link the accounts, because they may be different users.
       *      */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "auth-email": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          email: components["schemas"]["email"];
        };
      };
    };
    responses: {
      /** @description A magic link was sent to the user's email
       *      */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "auth-phone": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          phone: components["schemas"]["phone"];
        };
      };
    };
    responses: {
      /** @description A magic link was sent to the user's phone
       *      */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "auth-code": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description User's ID
           */
          accountId: string;
          /** @description Code sent by us to the user */
          code: string;
        };
      };
    };
    responses: {
      /** @description Sign In: User already existed
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth-response-content"];
        };
      };
      /** @description Sign Up: User created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth-response-content"];
        };
      };
      /** @description Something went wrong, we don't return any specific details because of user's privacy.
       *
       *     Possible causes:
       *     - Code invalid or expired
       *     - User's email isn't verified on the provider
       *     - An user with the same email, that it's connected to the same provider, but with a different provider ID already exists. In this case we can't link the accounts, because they may be different users.
       *      */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "auth-refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          refreshToken: components["schemas"]["refresh-token"];
        };
      };
    };
    responses: {
      /** @description Refresh succeeded
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            accessToken: components["schemas"]["access-token"];
            expiresAt: components["schemas"]["expires-at"];
          };
        };
      };
      /** @description Invalid refresh token
       *      */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "account-iam": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns user's data
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: uuid
             * @description User's ID
             */
            id: string;
            /** @description User's Google's ID */
            googleId?: string;
            /** @description User's current active subscription */
            subscription: components["schemas"]["Subscription"];
          };
        };
      };
      401: components["responses"]["unauthorized"];
    };
  };
  "account-name": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: components["schemas"]["name"];
        };
      };
    };
    responses: {
      /** @description Name updated
       *      */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid name
       *      */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized
       *      */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "account-update-onboarding": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: boolean;
          categories?: boolean;
          bankAccounts?: boolean;
          creditCards?: boolean;
          budget?: boolean;
          salary?: boolean;
        };
      };
    };
    responses: {
      /** @description Onboarding progress updated
       *      */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid name
       *      */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized
       *      */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "bank-providers": {
    parameters: {
      query?: {
        /** @description Page for the pagination */
        page?: number;
        /** @description Limit of items to bring per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of bank providers
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: components["schemas"]["BankProvider"][];
          };
        };
      };
      401: components["responses"]["unauthorized"];
    };
  };
  "bank-account-get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Data returned
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: components["schemas"]["BankAccount"][];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "bank-account-create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: components["schemas"]["name"];
          /**
           * Format: uuid
           * @description ID of bank provider
           */
          bankProviderId: string;
          accountNumber: components["schemas"]["account-number"];
          branch: components["schemas"]["branch"];
          balance: components["schemas"]["balance"];
        };
      };
    };
    responses: {
      /** @description Bank account created
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BankAccount"];
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
      /** @description Bank provider doesn't exists
       *      */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bank account already registered
       *      */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "bank-account-balance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description Bank account ID
           */
          id: string;
          balance: components["schemas"]["balance"];
        };
      };
    };
    responses: {
      /** @description Balance updated
       *      */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["unauthorized"];
      /** @description Bank account doesn't exists
       *      */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "budget-create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: components["schemas"]["name"];
          description: components["schemas"]["description"];
          year: components["schemas"]["year"];
          items: {
            /**
             * Format: uuid
             * @description Category ID
             */
            categoryId: string;
            items: {
              month: components["schemas"]["month"];
              amount: components["schemas"]["amount"];
            }[];
          }[];
        };
      };
    };
    responses: {
      /** @description Budget created
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Budget"];
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "budget-basic-create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: components["schemas"]["name"];
          description: components["schemas"]["description"];
          year: components["schemas"]["year"];
          items: {
            /**
             * Format: uuid
             * @description Category ID
             */
            categoryId: string;
            amount: components["schemas"]["amount"];
          }[];
        };
      };
    };
    responses: {
      /** @description Budget created
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Budget"];
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "budget-overview": {
    parameters: {
      query: {
        /** @description Budget ID */
        budgetId: string;
        /** @description Budget month to get overview */
        month: number;
        /** @description Budget year to get overview */
        year: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            totalExpenses: components["schemas"]["amount"];
            totalBudget: components["schemas"]["amount"];
            remainingBudget: components["schemas"]["amount"];
            budgetByCategory: {
              /**
               * Format: uuid
               * @description Category ID
               */
              id: string;
              name: components["schemas"]["name"];
              description: components["schemas"]["description"];
              icon: components["schemas"]["icon"];
              color: components["schemas"]["color"];
              /** @description Tells if the category should appear on the category selection or not
               *      */
              active: boolean;
              totalExpenses: components["schemas"]["amount"];
              totalBudget: components["schemas"]["amount"];
              remainingBudget: components["schemas"]["amount"];
            }[];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "card-providers": {
    parameters: {
      query?: {
        /** @description Page for the pagination */
        page?: number;
        /** @description Limit of items to bring per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of card providers
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: components["schemas"]["CardProvider"][];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "card-create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description Card provider ID
           */
          cardProviderId: string;
          name: components["schemas"]["name"];
          lastFourDigits: components["schemas"]["last-four-digits"];
          dueDay?: components["schemas"]["due-day"];
          limit?: components["schemas"]["card-limit"];
          balance?: components["schemas"]["balance"];
          payAt?: components["schemas"]["pay-at"];
          /**
           * Format: uuid
           * @description Bank account ID, required if want to also create recurrent transaction
           */
          payWithId?: string;
        };
      };
    };
    responses: {
      /** @description Card created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
      /** @description Card provider doesn't exists
       *      */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "card-postpaid": {
    parameters: {
      query: {
        /** @description Date relative to the open bills, usually the current date */
        date: string;
        /** @description Page for the pagination */
        page?: number;
        /** @description Limit of items to bring per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List user's postpaid cards
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: components["schemas"]["CardPostpaid"][];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "card-prepaid": {
    parameters: {
      query?: {
        /** @description Page for the pagination */
        page?: number;
        /** @description Limit of items to bring per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List user's prepaid cards
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: components["schemas"]["CardPrepaid"][];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  card: {
    parameters: {
      query: {
        /** @description Date relative to the open bills, usually the current date */
        date: string;
        /** @description Page for the pagination */
        page?: number;
        /** @description Limit of items to bring per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List user's cards bills to be paid
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: components["schemas"]["CardGetBillsToBePaid"][];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "category-create-many": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          categories: {
            name: components["schemas"]["name"];
            description: components["schemas"]["description"];
            icon: components["schemas"]["icon"];
            color: components["schemas"]["color"];
          }[];
        };
      };
    };
    responses: {
      /** @description Categories created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "category-get": {
    parameters: {
      query?: {
        /** @description Flag to tell if only active categories should be returned */
        onlyActive?: boolean;
        /** @description Page for the pagination */
        page?: number;
        /** @description Limit of items to bring per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of the user's categories
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: components["schemas"]["Category"][];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "category-delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description Category ID
           */
          id: string;
        };
      };
    };
    responses: {
      /** @description Category deleted
       *      */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "category-update": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description Category ID
           */
          id: string;
          name?: components["schemas"]["name"];
          description?: components["schemas"]["description"];
          icon?: components["schemas"]["icon"];
          color?: components["schemas"]["color"];
        };
      };
    };
    responses: {
      /** @description Category updated
       *      */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "category-default": {
    parameters: {
      query?: {
        /** @description Page for the pagination */
        page?: number;
        /** @description Limit of items to bring per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of default categories
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: {
              name: components["schemas"]["name"];
              description: components["schemas"]["description"];
              icon: components["schemas"]["icon"];
              color: components["schemas"]["color"];
            }[];
          };
        };
      };
      401: components["responses"]["unauthorized"];
    };
  };
  "terms-accept": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: semver
           * @description Terms and policies ID
           */
          semVer: string;
        };
      };
    };
    responses: {
      /** @description Terms accepted
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Possible causes:
       *     - Version is previous than the one that he already has accepted
       *     - Version is not live yet
       *      */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["unauthorized"];
      /** @description Terms and policies doesn't exists
       *      */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "terms-latest": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns latest terms data
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TermsOfService"];
        };
      };
    };
  };
  "transaction-get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description Budget ID
           */
          budgetId: string;
          month: components["schemas"]["month"];
          year: components["schemas"]["year"];
        };
      };
    };
    responses: {
      /** @description Success
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            paging: components["schemas"]["paging"];
            data: {
              /**
               * Format: uuid
               * @description Transaction ID
               */
              id: string;
              name: components["schemas"]["name"];
              amount: components["schemas"]["amount"];
              type: components["schemas"]["transaction-type"];
              /** @description Transaction installments */
              category: {
                icon: components["schemas"]["icon"];
                color: components["schemas"]["color"];
              };
              /** @description Transaction installments */
              installment?: {
                /** @description Total installments that the transaction group has */
                total: number;
                /** @description Current installment that the transaction represents */
                current: number;
              };
            }[];
          };
        };
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "transaction-salary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uuid
           * @description Budget ID
           */
          budgetId: string;
          /**
           * Format: uuid
           * @description Category ID
           */
          categoryId: string;
          /**
           * Format: uuid
           * @description Bank Account ID where the salary will be deposited
           */
          bankAccountId: string;
          amount: components["schemas"]["amount"];
          installments: {
            /** @description Day of the month that this installment of the salary is deposited */
            dayOfTheMonth: number;
            /** @description Percentage of the salary that it's deposited */
            percentage: number;
          }[];
        };
      };
    };
    responses: {
      /** @description Salary created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "transaction-transfer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: components["schemas"]["transaction-name"];
          description: components["schemas"]["description"];
          amount: components["schemas"]["amount"];
          /**
           * Format: uuid
           * @description ID of the bank account that the money will be withdrawn from
           */
          bankAccountFromId: string;
          /**
           * Format: uuid
           * @description ID of the bank account that the money will be deposited to
           */
          bankAccountToId: string;
          /**
           * Format: uuid
           * @description BudgetDate ID
           */
          budgetDateId: string;
          createdAt: components["schemas"]["created-at"];
        };
      };
    };
    responses: {
      /** @description Transaction created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "transaction-in-out": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Transaction type
           *
           * @enum {string}
           */
          type: "IN" | "OUT";
          name: components["schemas"]["transaction-name"];
          description: components["schemas"]["description"];
          amount: components["schemas"]["amount"];
          /**
           * Format: uuid
           * @description ID of the bank account to add/remove money
           */
          bankAccountId: string;
          /**
           * Format: uuid
           * @description Category ID
           */
          categoryId: string;
          /**
           * Format: uuid
           * @description BudgetDate ID
           */
          budgetDateId: string;
          createdAt: components["schemas"]["created-at"];
        };
      };
    };
    responses: {
      /** @description Transaction created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "transaction-credit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: components["schemas"]["transaction-name"];
          description: components["schemas"]["description"];
          amount: components["schemas"]["amount"];
          /** @description Amount of installments for the transaction
           *      */
          installments: number;
          /**
           * Format: uuid
           * @description ID of the card used to pay the transaction
           */
          cardId: string;
          /**
           * Format: uuid
           * @description Category ID
           */
          categoryId: string;
          /**
           * Format: uuid
           * @description BudgetDate ID
           */
          budgetDateId: string;
          createdAt: components["schemas"]["created-at"];
        };
      };
    };
    responses: {
      /** @description Transaction created
       *      */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad-request"];
      401: components["responses"]["unauthorized"];
    };
  };
  "wallet-balance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success
       *      */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            bankAccountBalance: components["schemas"]["amount"];
            vaBalance?: components["schemas"]["amount"];
            vtBalance?: components["schemas"]["amount"];
          };
        };
      };
      401: components["responses"]["unauthorized"];
    };
  };
}
